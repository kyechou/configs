################################################################################
#
#   wm independent hotkeys
#
################################################################################

# terminal emulator
alt + Return
    alacritty

# make sxhkd reload its configuration files:
alt + ctrl + r
    pkill -USR1 -x sxhkd

# program launcher
alt + d
    rofi -no-lazy-grab -show drun -modi drun
alt + x
    rofi -no-lazy-grab -show combi -modi combi -combi-modi window,drun,run,ssh

# pass password manager
alt + p
    ~/.config/rofi/passmenu.sh --type -no-lazy-grab -i -p "pass" -no-custom

# keyboard and mouse config
ctrl + 3
    xset r rate 400 35  # autorepeat delay: 400 ms, autorepeat rate: 35 hits/sec
ctrl + 4
    xset m 0 0          # acceleration: 0, threshold: 0

# touchpad
ctrl + 1
    if [[ ${HOSTNAME:-$(uname -n)} == *"thinkpad"* ]]; then \
        xinput disable 'SynPS/2 Synaptics TouchPad'; \
    elif [[ ${HOSTNAME:-$(uname -n)} == *"asus"* ]]; then \
        xinput disable 'ELAN1200:00 04F3:306F Touchpad'; \
    else \
        xinput disable 'ELAN1200:00 04F3:3107 Touchpad'; \
    fi
ctrl + 2
    if [[ ${HOSTNAME:-$(uname -n)} == *"thinkpad"* ]]; then \
        xinput enable 'SynPS/2 Synaptics TouchPad'; \
    elif [[ ${HOSTNAME:-$(uname -n)} == *"asus"* ]]; then \
        xinput enable 'ELAN1200:00 04F3:306F Touchpad'; \
    else \
        xinput enable 'ELAN1200:00 04F3:3107 Touchpad'; \
    fi

# touch screen
ctrl + {7,8}
    if [[ ${HOSTNAME:-$(uname -n)} == *"asus"* ]]; then \
        xinput {disable,enable} 'ELAN2556:00 04F3:25EE'; \
    fi

# screen backlight
ctrl + {5,6}
    light -{U,A} 3
XF86MonBrightness{Down,Up}
    light -{U,A} 3

# power/session management
# (lock, exit/logout, suspend, hibernate, reboot, poweroff)
alt + Pause ; l
    i3lock -ec 000000
alt + Pause ; e
    bspc quit
alt + Pause ; {s,h}
    i3lock -ec 000000 && systemctl {suspend,hibernate}
alt + Pause ; {r,p}
    systemctl {reboot,poweroff}

# pulse audio
alt + period
    pactl set-sink-volume \
        "$(pactl list short sinks | grep -E 'output|sink' | tail -n1 | cut -f2)" \
        +2%
alt + comma
    pactl set-sink-volume \
        "$(pactl list short sinks | grep -E 'output|sink' | tail -n1 | cut -f2)" \
        -2%
alt + m
    pactl set-sink-volume \
        "$(pactl list short sinks | grep -E 'output|sink' | tail -n1 | cut -f2)" \
        0%
XF86AudioRaiseVolume
    pactl set-sink-volume \
        "$(pactl list short sinks | grep -E 'output|sink' | tail -n1 | cut -f2)" \
        +2%
XF86AudioLowerVolume
    pactl set-sink-volume \
        "$(pactl list short sinks | grep -E 'output|sink' | tail -n1 | cut -f2)" \
        -2%
XF86AudioMute
    pactl set-sink-volume \
        "$(pactl list short sinks | grep -E 'output|sink' | tail -n1 | cut -f2)" \
        0%

# program shortcuts
alt + ctrl + a
    ferdi
alt + ctrl + b
    firefox
alt + ctrl + c
    speedcrunch
alt + ctrl + d
    gnome-dictionary
alt + ctrl + f
    alacritty -t nnn -e nnn
alt + ctrl + m
    alacritty -e cmus
alt + ctrl + n
    alacritty -t newsboat -e newsboat
alt + ctrl + p
    ~/.config/polybar/launch.sh
alt + ctrl + s
    spotify
alt + ctrl + t
    thunderbird
alt + ctrl + v
    virt-manager
Print
    gnome-screenshot -i

################################################################################
#
#   bspwm hotkeys
#
################################################################################

# restart bspwm
alt + ctrl + shift + r
    bspc wm --restart

# reset monitor
alt + ctrl + shift + m
    ~/.config/bspwm/reset-monitor

# close and kill windows
alt + ctrl + {_,shift + }q
    bspc node --{close,kill}

# set the window state
alt + e
    if bspc query -T -d | grep '"layout":"monocle"' >/dev/null; then \
        bspc desktop --layout tiled; \
    else \
        bspc node --state tiled; \
    fi
alt + shift + e
    if bspc query -T -n | grep '"state":"pseudo_tiled"' >/dev/null; then \
        bspc node --state tiled; \
    else \
        bspc node --state pseudo_tiled; \
    fi
alt + @space
    if bspc query -T -n | grep '"state":"floating"' >/dev/null; then \
        bspc node --state tiled; \
    else \
        bspc node --state floating; \
    fi
alt + f
    if bspc query -T -n | grep '"state":"fullscreen"' >/dev/null; then \
        bspc node --state tiled; \
    else \
        bspc node --state fullscreen; \
    fi

# alternate between the tiled and monocle layout
alt + w
    bspc desktop --layout monocle

#
# focus/swap
#

# focus the node in the given direction
alt + {j,k}
    bspc node --focus {south,north}
alt + h
    if bspc query -T -d | grep '"layout":"monocle"' >/dev/null; then \
        bspc node --focus prev.local.leaf; \
    else \
        bspc node --focus west; \
    fi
alt + l
    if bspc query -T -d | grep '"layout":"monocle"' >/dev/null; then \
        bspc node --focus next.local.leaf; \
    else \
        bspc node --focus east; \
    fi

# swap/move the node in the given direction
alt + ctrl + h
    if bspc query -T -n | grep '"state":"floating"' >/dev/null; then \
        bspc node --move -20 0; \
    elif bspc query -T -d | grep '"layout":"monocle"' >/dev/null; then \
        bspc node --swap prev.local.leaf; \
    else \
        bspc node --swap west; \
    fi
alt + ctrl + j
    if bspc query -T -n | grep '"state":"floating"' >/dev/null; then \
        bspc node --move 0 20; \
    else \
        bspc node --swap south; \
    fi
alt + ctrl + k
    if bspc query -T -n | grep '"state":"floating"' >/dev/null; then \
        bspc node --move 0 -20; \
    else \
        bspc node --swap north; \
    fi
alt + ctrl + l
    if bspc query -T -n | grep '"state":"floating"' >/dev/null; then \
        bspc node --move 20 0; \
    elif bspc query -T -d | grep '"layout":"monocle"' >/dev/null; then \
        bspc node --swap next.local.leaf; \
    else \
        bspc node --swap east; \
    fi

# focus or send to the given desktop
alt + {_,ctrl + }{1-9,0}
    bspc {desktop --focus,node --to-desktop} '^{1-9,10}'

# focus the node for the given path jump
alt + {a,b,c,shift + c}
    bspc node --focus @{parent,brother,first,second}

# focus the next/previous desktop in the current monitor
alt + bracket{left,right}
    bspc desktop --focus {prev,next}.local

# send the node to the next/previous desktop in the current monitor
alt + ctrl + bracket{left,right}
    bspc node --to-desktop {prev,next}.local

# bubble up/down the current desktop with the next/previous desktop in the
# current monitor
alt + ctrl + shift + bracket{left,right}
    bspc desktop --bubble {prev,next}

# focus the last node/desktop
alt + grave
    bspc node --focus last.leaf
alt + Tab
    bspc desktop --focus last.occupied

# focus the older or newer node in the focus history
alt + {o,i}
    bspc wm -h off; \
    bspc node {older,newer}.leaf --focus; \
    bspc wm -h on

#
# resize
#

# expand a window by moving one of its side outward
alt + super + {h,j,k,l}
    bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
alt + super + shift + {h,j,k,l}
    bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# balance the nodes ratio in the current desktop
alt + ctrl + shift + b
    bspc node @/ --balance

# equalize the nodes ratio in the current desktop
alt + ctrl + shift + e
    bspc node @/ --equalize

#
# rotate
#
alt + {_,shift + }r
    bspc node @parent -R {90,270}
