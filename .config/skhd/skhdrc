#  A list of all built-in modifier and literal keywords can
#  be found at https://github.com/koekeishiya/skhd/issues/1
#
#  A hotkey is written according to the following rules:
#
#    hotkey       = <mode> '<' <action> | <action>
#
#    mode         = 'name of mode' | <mode> ',' <mode>
#
#    action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                   <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                   <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#    keysym       = <mod> '-' <key> | <key>
#
#    mod          = 'modifier keyword' | <mod> '+' <mod>
#
#    key          = <literal> | <keycode>
#
#    literal      = 'single letter or built-in keyword'
#
#    keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#    proc_map_lst = * <proc_map>
#
#    proc_map     = <string> ':' <command> | <string>     '~' |
#                   '*'      ':' <command> | '*'          '~'
#
#    string       = '"' 'sequence of characters' '"'
#
#    command      = command is executed through '$SHELL -c' and
#                   follows valid shell syntax. if the $SHELL environment
#                   variable is not set, it will default to '/bin/bash'.
#                   when bash is used, the ';' delimeter can be specified
#                   to chain commands.
#
#                   to allow a command to extend into multiple lines,
#                   prepend '\' at the end of the previous line.
#
#                   an EOL character signifies the end of the bind.
#
#    ->           = keypress is not consumed by skhd
#
#    *            = matches every application not specified in <proc_map_lst>
#
#    ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>

#  A mode is declared according to the following rules:
#
#    mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                '::' <name> '@'               | '::' <name>
#
#    name      = desired name for this mode,
#
#    @         = capture keypresses regardless of being bound to an action
#
#    command   = command is executed through '$SHELL -c' and
#                follows valid shell syntax. if the $SHELL environment
#                variable is not set, it will default to '/bin/bash'.
#                when bash is used, the ';' delimeter can be specified
#                to chain commands.
#
#                to allow a command to extend into multiple lines,
#                prepend '\' at the end of the previous line.
#
#                an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]


#
# Window managing keybindings (yabai)
# https://github.com/koekeishiya/yabai/wiki/Commands
#

# Switch the active/focused window
cmd - h : yabai -m window --focus west
cmd - l : yabai -m window --focus east
cmd - k : yabai -m window --focus north
cmd - j : yabai -m window --focus south
cmd - o : yabai -m window --focus prev
cmd - i : yabai -m window --focus next
cmd - b : yabai -m window --focus recent
cmd - 0x32 : yabai -m window --focus recent # grave
# Swap the active (tiled) window
# Move the active (floating) window
cmd + ctrl - h : yabai -m window --swap west  ; yabai -m window --move "rel:-60:0"
cmd + ctrl - l : yabai -m window --swap east  ; yabai -m window --move "rel:60:0"
cmd + ctrl - k : yabai -m window --swap north ; yabai -m window --move "rel:0:-60"
cmd + ctrl - j : yabai -m window --swap south ; yabai -m window --move "rel:0:60"
cmd + ctrl - o : yabai -m window --swap prev
cmd + ctrl - i : yabai -m window --swap next
# Hide the front-most window ('-')
cmd + ctrl - 0x1B : osascript -e 'tell application "System Events" to set visible of first application process whose frontmost is true to false'
# cmd + ctrl - b : yabai -m window --swap recent
cmd + ctrl - 0x32 : yabai -m window --focus recent # grave
# Move/Warp the active (tiled) window
cmd + ctrl + shift - h : yabai -m window --warp west
cmd + ctrl + shift - l : yabai -m window --warp east
cmd + ctrl + shift - k : yabai -m window --warp north
cmd + ctrl + shift - j : yabai -m window --warp south
# Reposition the floating position or tiling split ratio
cmd + ctrl - 0x18 : yabai -m space --balance # '='
# Resize the active window
cmd + shift - h : yabai -m window --resize right:-60:0
cmd + shift - l : yabai -m window --resize right:60:0
cmd + shift - k : yabai -m window --resize bottom:0:-60
cmd + shift - j : yabai -m window --resize bottom:0:60
# Workspaces
# Switch active/focused workspace
cmd - 1 : yabai -m space --focus 1
cmd - 2 : yabai -m space --focus 2
cmd - 3 : yabai -m space --focus 3
cmd - 4 : yabai -m space --focus 4
cmd - 5 : yabai -m space --focus 5
cmd - 6 : yabai -m space --focus 6
cmd - 7 : yabai -m space --focus 7
cmd - 8 : yabai -m space --focus 8
cmd - 9 : yabai -m space --focus 9
# Move the active window to the given workspace
cmd + ctrl - 1 : yabai -m window --space 1
cmd + ctrl - 2 : yabai -m window --space 2
cmd + ctrl - 3 : yabai -m window --space 3
cmd + ctrl - 4 : yabai -m window --space 4
cmd + ctrl - 5 : yabai -m window --space 5
cmd + ctrl - 6 : yabai -m window --space 6
cmd + ctrl - 7 : yabai -m window --space 7
cmd + ctrl - 8 : yabai -m window --space 8
cmd + ctrl - 9 : yabai -m window --space 9
# Move AND switch the active window to the given workspace
cmd + ctrl + shift - 1 : yabai -m window --space 1 --focus
cmd + ctrl + shift - 2 : yabai -m window --space 2 --focus
cmd + ctrl + shift - 3 : yabai -m window --space 3 --focus
cmd + ctrl + shift - 4 : yabai -m window --space 4 --focus
cmd + ctrl + shift - 5 : yabai -m window --space 5 --focus
cmd + ctrl + shift - 6 : yabai -m window --space 6 --focus
cmd + ctrl + shift - 7 : yabai -m window --space 7 --focus
cmd + ctrl + shift - 8 : yabai -m window --space 8 --focus
cmd + ctrl + shift - 9 : yabai -m window --space 9 --focus
# Switch/Move to the previous/next workspace
cmd - 0x21 : yabai -m space --focus prev # '['
cmd - 0x1E : yabai -m space --focus next # ']'
cmd + ctrl - 0x21 : yabai -m window --space prev # '['
cmd + ctrl - 0x1E : yabai -m window --space next # ']'
# Set the window layout
cmd - space : yabai -m window --toggle float --grid 4:3:1:1:1:2
cmd + shift - space : yabai -m window --toggle sticky
cmd - e : yabai -m window --toggle zoom-fullscreen
cmd + shift - e : yabai -m window --toggle native-fullscreen
cmd + shift - f : yabai -m window --toggle native-fullscreen
cmd + shift - r : yabai -m window --toggle split

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"


#
# Non-window-managing keybindings
# https://wiki.hyprland.org/Configuring/Binds/
#

# Audio
cmd - 0x2F : osascript -e 'set volume output volume (output volume of (get volume settings)) + 2' # period
cmd - 0x2B : osascript -e 'set volume output volume (output volume of (get volume settings)) - 2' # comma
cmd - m :    osascript -e 'set volume output muted (not output muted of (get volume settings))'
cmd + shift - 0x2F : osascript -e 'set volume input volume (input volume of (get volume settings)) + 2' # period
cmd + shift - 0x2B : osascript -e 'set volume input volume (input volume of (get volume settings)) - 2' # comma

# Program shortcuts
cmd - return :              open -na /Applications/Alacritty.app
cmd + ctrl - a :            open -a /Applications/Quip.app
cmd + ctrl - b :            open -a /Applications/Firefox.app
cmd + ctrl + shift - b :    open -na /Applications/Firefox.app
cmd + ctrl - c :            open -a /System/Applications/Calculator.app
cmd + ctrl - f :            /Applications/Alacritty.app/Contents/MacOS/alacritty --class yazi --title yazi -e yazi /Users/kychou
cmd + ctrl + shift - f :    open -a /System/Library/CoreServices/Finder.app
cmd + ctrl - m :            open -a "/Applications/Microsoft Outlook.app"
cmd + ctrl - n :            /Applications/Alacritty.app/Contents/MacOS/alacritty --class newsboat --title newsboat -e newsboat
cmd + ctrl - s :            open -a /Applications/Slack.app
# cmd + ctrl - v :            open -a Virtualization
# cmd + ctrl - w :            open -a Status Bar
0x69 :                      open -a /System/Applications/Utilities/Screenshot.app
